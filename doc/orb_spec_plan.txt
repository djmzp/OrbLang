program ::= exprs;

exprs ::= expr exprs |
	eps;

expr ::= expr_walled |
	exprs ';';

expr_walled ::= expr_walled_bare ':' expr_walled_bare;

expr_walled_bare ::= '(' exprs ')' |
	'{' exprs '}' |
	ID |
	INT |
	FLOAT |
	CHAR |
	STRING |
	BOOL |
	NULL;

_ALPHA is [a-zA-Z]
_DIGIT is [0-9]
_PLUS is +
_MINUS is -
_SIGNS_OTHER are =+-*/%<>&|!~[]._
_SIGNS is [:_PLUS::_MINUS::_SIGNS_OTHER:]
ID is [:_ALPHA::SIGNS_OTHER:][:_ALPHA::_DIGIT::SIGNS:]* or [:_PLUS::_MINUS:] or [:_PLUS::_MINUS:][:_ALPHA::SIGNS:][:_ALPHA::_DIGIT::SIGNS:]*
INT and FLOAT need to start with + or - or _DIGIT, can contain 0123456789abcdefABCDEF.xXeEpP_
CHAR is within '', STRING is within "", escaping applies
BOOL is true or false
NULL is null

comments are # for single line, #* ... *# for multiline

********************

class KnownVal:
	oneof:
		prim stuff
		id
		type
	optional ref

class LlvmVal:
	val
	ref

class NodeVal:
	CodeLoc
	optional<TypeTable::Id>
	oneof:
		known val
		llvm val
		children nodes
	type node
	is import
