fnc print_i8(i8 x);
fnc print_i16(i16 x);
fnc print_i32(i32 x);
fnc print_i64(i64 x);

fnc println_i8(i8 x);
fnc println_i16(i16 x);
fnc println_i32(i32 x);
fnc println_i64(i64 x);

fnc scan_i8() i8;
fnc scan_i16() i16;
fnc scan_i32() i32;
fnc scan_i64() i64;

fnc print_u8(u8 x);
fnc print_u16(u16 x);
fnc print_u32(u32 x);
fnc print_u64(u64 x);

fnc println_u8(u8 x);
fnc println_u16(u16 x);
fnc println_u32(u32 x);
fnc println_u64(u64 x);

fnc scan_u8() u8;
fnc scan_u16() u16;
fnc scan_u32() u32;
fnc scan_u64() u64;

fnc print_f32(f32 x);
fnc print_f64(f64 x);

fnc println_f32(f32 x);
fnc println_f64(f64 x);

fnc scan_f32() f32;
fnc scan_f64() f64;

fnc malloc(u64 size) ptr;
fnc free(ptr addr);

i32 * glob = true ? null : null;

fnc pass(i32 [] x) i32 [] {
    ret x;
}

fnc touch(i32[4] arr) {
    for (i32 i = 0; i < 4; ++i)
        arr[i] = -1;
}

fnc setAll(i32[4]* arr, i32 val) {
    for (i32 i = 0; i < 4; ++i)
        (*arr)[i] = val;
}

fnc retAll(i32 val) i32[4] {
    i32[4] arr;
    for (i32 i = 0; i < 4; ++i) arr[i] = val;
    ret arr;
}

fnc pass(i32 x) i32 {
    ret x;
}

fnc pass(i32 cn*cn x) i32 {
    ret *x;
}

fnc main() {
    i32 * a;
    i32 * b, c;
    i32 ** d;
    ptr e;
    ptr f = null;
    i32 [] g, h;
    i32 [][] i;
    i32 j;
    i32 []* k;
    i32 *[] l;
    i32[4] m, n;
    i32[4][2] o;
    j = 1001;
    i32 cn p = 1000, q = j;
    i32*cn r1 = i32*cn(malloc(4));
    i32 cn* r2 = i32 cn*(malloc(4));
    i32 cn*cn r3 = i32 cn*cn(malloc(4));
    i32[]cn s1 = i32[]cn(malloc(4));
    // TODO test these after making array literals
    i32 cn[] s2 = i32 cn[](malloc(4));
    i32 cn[]cn s3 = i32 cn[]cn(malloc(4));
    i32 cn[4] t1;
    i32[4]cn t2;
    i32 cn[4]cn t3;

    b = true ? a : c;

    a = null;
    println_i32(i32(null));
    println_i32(i32(a));
    println_u32(u32(a));
    println_i32(i32(i32*(0)));
    println_i32(i32(i32*(u32(0))));

    if (a == b);
    if (a != c);

    a = null;
    if (a == null) println_i32(0);
    if (null == a) println_i32(1);
    if (a != null) println_i32(2);
    if (null != a) println_i32(3);
    if (null == null) println_i32(4);
    if (null != null) println_i32(5);

    a = i32*(malloc(4));
    if (a == null) println_i32(6);
    if (null == a) println_i32(7);
    if (a != null) println_i32(8);
    if (null != a) println_i32(9);
    if (null == null) println_i32(10);
    if (null != null) println_i32(11);
    free(ptr(a));

    b = true ? null : null;
    if (b == null) println_i32(12);
    b = false ? null : null;
    if (b == null) println_i32(13);

    if (glob == null) println_i32(14);

    c = i32*(null);
    if (c == null) println_i32(15);

    e = null;
    (i8*(e));
    (i32*(e));

    if (e == f) println_i32(16);
    if (e != f) println_i32(17);

    if (&d != null) println_i32(100);
    if (&d == null) println_i32(101);
    if (&glob != null) println_i32(102);
    if (&glob == null) println_i32(103);

    a = i32*(malloc(4));
    b = i32*(malloc(4));
    *a = 200;
    println_i32(*a);
    c = a;
    *a = 201;
    println_i32(*c);
    *a = 202;
    println_i32(**&*&a);
    *a = 203;
    println_i32(pass(a));
    free(ptr(a));
    free(ptr(b));

    g = i32[](malloc(4*4));
    g[0] = 300;
    println_i32(g[0]);
    j = 0;
    println_i32(g[j]);
    println_i32((g)[0]);
    println_i32(i32[](g)[0]);
    println_i32(pass(g)[0]);
    g[1] = 301;
    println_i32(g[1]);
    println_i32(g[j+1]);
    h = i32[](&g[1]);
    println_i32(h[0]);
    println_i32(h[-1]);
    println_i32(h[j-1]);
    free(ptr(g));

    i = i32[][](malloc(32)); // some number larger than size of pointer
    i[0] = i32[](malloc(4));
    i[0][0] = 400;
    println_i32(i[0][0]);
    i[0][0] = 401;
    k = i32[]*(i);
    println_i32((*k)[0]);
    i[0][0] = 402;
    l = i32*[](i);
    println_i32(*l[0]);
    free(ptr(i[0]));
    free(ptr(i));

    m[0] = 500;
    println_i32(m[0]);
    n[1] = m[0];
    j = 1;
    println_i32(n[j]);
    touch(m);
    j = 1;
    println_i32(m[j-1]);
    setAll(&m, 501);
    println_i32(m[0+1]);
    m[0] = 502;
    println_i32((i32[](&m))[0]);
    m[1] = 503;
    println_i32((i32[](&m[1]))[0]);
    println_i32((*(i32[4]*(&m[1])))[0]);
    setAll(&m, 504);
    n = m;
    println_i32(n[2]);
    o[0][0] = 505;
    println_i32(o[0][0]);
    setAll(&o[1], 506);
    println_i32(o[1][3]);
    setAll(&o[0], 507);
    println_i32((i32[](&o))[3]);
    println_i32((i32[](&o))[4]);
    println_i32(o[1][0]);
    n = true ? o[0] : o[1];
    println_i32(n[0]);
    j = 0;
    n = j < 0 ? o[0] : o[1];
    println_i32(n[0]);
    n = retAll(508);
    println_i32(n[0]);
    println_i32(retAll(509)[0]);

    println_i32(p);
    println_i32(q);
    *r1 = 1002;
    println_i32(*r1);
    free(ptr (r2));
    r2 = i32 cn*(malloc(4));
    s1[0] = 1003;
    println_i32(s1[0]);
    j = 1004;
    println_i32(pass(j));
    free(ptr cn(s3));
    free(ptr(s2));
    free(ptr cn(s1));
    free(ptr cn(r3));
    free(ptr (r2));
    free(ptr cn(r1));

    r2 = a;
}