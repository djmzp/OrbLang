import "tests/base.orb";
import "tests/io.orb";

fnc main() () {
    - 10;
    cast i64 0;
    + 0:i64;
    
    block { println_i32 (cast i32 -10); println_i32 (cast i16 10); println_i8 (cast i8 (cast i64 1027)); };
    block { println_u32 (cast u32 -10); };
    block { println_i32 (cast i32 (cast f16 -10)); };
    block { println_i32 99:i32; };
    block {
        let (x:i32 10);
        println_i32 (cast i32 (cast bool x));
        println_i32 (cast i32 (cast bool 10));
        println_i32 (cast i32 (cast bool -10));
    };

    block { println_i32 (cast i32 (cast u32 10)); };
    block { println_u32 (cast u32 10); println_u32 (cast u16 10); println_u8 (cast u8 (cast u64 1027)); };
    block { println_u32 (cast u32 (cast f32 10)); };
    block {
        let (x:u32 (cast u32 10));
        println_i32 (cast i32 (cast bool x));
        println_i32 (cast i32 (cast bool (cast u32 10)));
        println_i32 (cast i32 (cast bool (cast u32 -10)));
    };

    block { println_i32 (cast i32 (cast f32 10)); };
    block { println_i32 (cast i32 (cast f32 (cast u32 10))); };
    block { println_i32 (cast i32 (cast f32 -10)); println_i32 (cast i32 (cast f16 10)); println_i32 (cast i32 (cast f16 (cast f64 1027))); };

    block { println_i32 (cast i32 true); println_i32 (cast i32 false); };
    block { println_u32 (cast u32 true); println_u32 (cast u32 false); };

    let (t:bool true);
    let (f:bool false);

    block {
        let (c:c8 'a');
        println_c8 c;
        = c (cast c8 65);
        println_c8 c;
        let (x:i32 66);
        = c (cast c8 x);
        println_c8 c;
        println_u8 (cast u8 c);
        println_i32 (cast i32 'C');
        println_i32 (- (cast i16 'A') (cast i16 'a'));
        println_c8 'D';
        println_c8 ' ';
        println_c8 '\n';
        println_c8 '\'';
        println_c8 '\x48';
        println_c8 '\\';
    };

    block {
        println_str (cast (c8 cn []) "testing1");
        let (str1:(c8 9) "testing2");
        println_str (cast (c8 cn []) (& str1));
        println_c8 ([] str1 0);
        let (i:i32 1);
        println_c8 ([] str1 i);
        = ([] str1 7) '3';
        println_str (cast (c8 cn []) (& str1));
        println_c8 ([] "hello" 0);
        println_c8 (* (& ([] "hello" 1)));
        = i 2;
        println_c8 (* (& ([] "hello" i)));
        cast ptr "ciao";
        let (str2:(c8 cn []) "abcd");
        if (!= str2 "pqrs") { println_i32 0; };
        if (== "pqrs" str2) { println_i32 1; };
    };

    block {
        let (p1:ptr null) (p2:(ptr cn) null);

        let (x1:(i32 cn *) p1);
        let (x2:(i32 cn *) p2);
        let (x3:(i32 * cn) p1);
        let (x4:(i32 * cn) p2);

        let (y1:(i32 cn []) p1);
        let (y2:(i32 cn []) p2);
        let (y3:(i32 [] cn) p1);
        let (y4:(i32 [] cn) p2);

        let (z1:ptr p2);
        let (z2:(ptr cn) p1);
    };

    block {
        println_i8 1;
        println_i16 (<< 1 8);
        println_i32 (<< 1 16);
        println_i64 (<< 1 32);

        println_u8 1;
        println_u16 (<< 1 8);
        println_u32 (<< 1 16);
        println_u64 (<< 1 32);
    };

    block {
        let (x 0x80000001);
        println_i64 x;
    };
};