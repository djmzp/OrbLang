// TODO put these in a shared file, after importing is implemented
fnc print_i8(i8 x);
fnc print_i16(i16 x);
fnc print_i32(i32 x);
fnc print_i64(i64 x);

fnc println_i8(i8 x);
fnc println_i16(i16 x);
fnc println_i32(i32 x);
fnc println_i64(i64 x);

fnc scan_i8() i8;
fnc scan_i16() i16;
fnc scan_i32() i32;
fnc scan_i64() i64;

fnc print_u8(u8 x);
fnc print_u16(u16 x);
fnc print_u32(u32 x);
fnc print_u64(u64 x);

fnc println_u8(u8 x);
fnc println_u16(u16 x);
fnc println_u32(u32 x);
fnc println_u64(u64 x);

fnc scan_u8() u8;
fnc scan_u16() u16;
fnc scan_u32() u32;
fnc scan_u64() u64;

fnc print_f32(f32 x);
fnc print_f64(f64 x);

fnc println_f32(f32 x);
fnc println_f64(f64 x);

fnc scan_f32() f32;
fnc scan_f64() f64;

i32 glob1;
i32 glob2 = 1;
i32 glob3 = 1+2*3, glob4 = 1, glob5;
i32 glob6 = 1>2?3:4;
bool glob7 = true or false;

fnc main() {
    println_i64(0);
    println_i64(1);
    println_i64(+1);
    println_i64(-1);
    println_i64(2+3);
    println_i64(2-3);
    println_i64(2 - -3);
    println_i64(4*5);
    println_i64(12/3);
    println_i64(12/-5);
    println_i64(1+(2*3));
    println_i64(1+2*3);
    println_i64((1+2)*3);
    println_i64(4*(0-5));

    i64 a = 0;
    println_i64(a);
    println_i64(a=1);
    println_i64(a);
    println_i64(++a);
    println_i64(a);
    println_i64(--a);
    println_i64(a);
    println_i64(--++a);
    println_i64(a);
    println_i64(++a + 10);
    println_i64(a);
    println_i64(a + ++a);
    println_i64(+a);
    println_i64(-a);
    println_i64(a += 2);
    println_i64(a);
    println_i64(a -= 2);
    println_i64(a);
    println_i64(a *= 2);
    println_i64(a);
    println_i64(a /= 2);
    println_i64(a);
    println_i64(a %= 2);
    println_i64(a);
    println_i64(a <<= 2);
    println_i64(a);
    println_i64(a >>= 2);
    println_i64(a);
    println_i64(a |= 3);
    println_i64(a);
    println_i64(a &= 10);
    println_i64(a);
    println_i64(a ^= 5);
    println_i64(a);

    i64 b=1;
    println_i64(a-b);

    {
        i64 a = 100;
        println_i64(a);
    }

    f32 c = f32(5);
    println_i32(i32(c));
    println_i32(i32(+c));
    println_i32(i32(-c));

    glob1 = 6;
    glob5 = 7;
    println_i32(glob1);
    println_i32(glob2);
    println_i32(glob3);
    println_i32(glob4);
    println_i32(glob5);
    println_i32(glob6);
    println_i32(glob7 ? 1 : 0);

    bool d = false;
    if (!d) println_i32(0);
    if (!!d) println_i32(0);

    println_i32(~100);
    println_i32(~-100);
    println_u32(~u32(100));

    println_i32(100%-6);
    println_u32(u32(100)%u32(3));
    println_i32(i32(f32(100)%f32(11)));

    println_i32(i32(100)<<i32(2));
    println_u32(u32(100)<<u8(2));

    println_i32(i32(100)>>i32(2));
    println_i32(i32(-100)>>i32(2));
    println_u32(u32(100)>>u8(2));

    println_i32(11 & 7);
    println_i32(11 & i32(-8));
    println_i32(11 & i32(-6));
    println_u32(u32(11) & u32(7));

    println_i32(11 ^ 7);
    println_i32(12 ^ i32(-8));
    println_i32(12 ^ i32(-6));
    println_u32(u32(11) ^ u32(7));

    println_i32(11 | 7);
    println_i32(12 | i32(-8));
    println_i32(12 | i32(-6));
    println_u32(u32(11) | u32(7));

    println_i32(1>0?100:101);
    println_i32(1<0?100:101);
    println_i32(1<0?2>1?100:101:2==2?100+2:100+3);
    println_i32(3+3>0?1:2);
    println_i32(3+(3>0?1:2));
    println_i64(a=1>0?100:101);
    println_i64(a+=1>0?100:101);

    if (true and true) println_i32(1);
    if (false and true) println_i32(1);
    if (true and false) println_i32(1);
    if (false and false) println_i32(1);
    if (true or true) println_i32(2);
    if (false or true) println_i32(2);
    if (true or false) println_i32(2);
    if (false or false) println_i32(2);
    if (1>0 or false) println_i32(3);
    if (1<0 or true) println_i32(4);
    if (true and 1>0) println_i32(5);
    if (1<0 and true) println_i32(6);

    println_i32(1000+100);
    println_u32(1000+100);
    println_i32(100-1000);
    println_u32(1000-1000);
    u8 e = +0;
    e = e|1;
    println_u8(e);
    println_u32(e);
    u32 f = e<<4;
    println_u32(f);
    if (1+1==2) println_i32(0);

    println_i32(011);
    println_i32(0xab);
    println_i32(0XCD);
    println_i32(0XbAbA);
    println_i32(0xBaBa);
    println_i32(0b1101);
    println_i32(1_000_000);
    println_i32(0_11);
    println_i32(0xa_b_c);
    println_i32(0_);
    println_i32(0__);
    println_i32(100__);

    println_f32(1.0);
    println_f32(1.);
    println_f32(.1);
    println_f32(1_000.005_000);
    println_f32(0x.F);
    println_f32(0X.F);
    println_f32(0X_.F);
    println_f32(0X._F);
    println_f32(0XA.F);
    println_f32(0X_A.F);
    println_f32(0XA_.F);
    println_f32(0XA._F);
    println_f32(0XA.F_);
    println_f32(1.1e4);
    println_f32(1.1E4);
    println_f32(0xA.1p2);
    println_f32(0xA.1P2);
    println_f32(INF);
    println_f32(-INF);
    println_f32(NAN);
    println_f32(-NAN);

    println_f64(1.0);
    println_f64(1.);
    println_f64(.1);
    println_f64(1_000.005_000);
    println_f64(0x.F);
    println_f64(0X.F);
    println_f64(0X_.F);
    println_f64(0X._F);
    println_f64(0XA.F);
    println_f64(0X_A.F);
    println_f64(0XA_.F);
    println_f64(0XA._F);
    println_f64(0XA.F_);
    println_f64(1.1e4);
    println_f64(1.1E4);
    println_f64(0xA.1p2);
    println_f64(0xA.1P2);
    println_f64(INF);
    println_f64(-INF);
    println_f64(NAN);
    println_f64(-NAN);

    println_f32(1.0+0.3);
    println_f32(1.0-0.3);
    println_f32(1.0*0.3);
    println_f32(1.0/0.3);
    println_f32(1.0%0.3);

    //println_i64(0);
    /* println_i64(0); */
    /*
    println_i64(0);
    */
}

//