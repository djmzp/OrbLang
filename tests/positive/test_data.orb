import "util/print.orb";

data Point2;

fnc dummy () Point2;

data Point2 {
    x:i32
    y:i32
};

eval (fnc makePoint2 (x:i32 y:i32) Point2 {
    sym p:Point2;
    = (. p x) x;
    = (. p y) y;
    ret p;
});

fixed myPoint2 Point2;

data Point3;
data Point3;

data Point3 {
    x:i32
    y:i32
    z:i32
};

data Point3;

fnc makePoint3(x:i32 y:i32 z:i32) Point3 {
    sym p:Point3;
    = (. p x) x;
    = (. p y) y;
    = (. p z) z;
    ret p;
};

data Chain {
    val:i32
    next:(Chain *)
};

data Elem;
data List {
    e:(Elem *)
    next:(List *)
};

fnc main () () {
    block {
        sym p:Point2;
        = (. p x) 100;
        println_i32 (. p x);
    };
    block {
        sym p:myPoint2;
        = (. p x) 101;
        println_i32 (. p x);
    };
    block {
        sym c0:Chain c1:Chain;
        = (. c0 val) 102;
        = (. c1 next) (& c0);
        println_i32 (. (* (. c1 next)) val);
    };
    block {
        sym l:List;
    };
    block {
        sym z:Point3;
        println_i32 (+ 103 (. z x) (. z y) (. z z));
    };
    block {
        sym (p0:(Point3 cn) (makePoint3 -1 104 -1)) p1:Point3;
        = p1 p0;
        println_i32 (. p1 y);
    };
    block {
        println_i32 (. (makePoint3 105 -1 -1) x);
    };
    block {
        eval (sym (p0 (makePoint2 106 -1)));
        sym (p1 p0);
        println_i32 (. p1 x);
    };
    block {
        data::global GlobInLocal;
        sym x:(data::global GlobInLocal { v:i32 });
        = (. x v) 107;
        println_i32 (. x v);
    };
};