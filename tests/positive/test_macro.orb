import "util/io.orb";

mac m1 () {
    ret ();
};

mac m2 (a b) {
    ret \(,a ,b);
};

mac m3 (a) {
    ret \(m2 println_i32 ,a);
};

mac m4 (a b) {
    m2 sym (x a);
    ret \(,x ,b);
};

mac ++ (a) {
    ret \(= ,a (+ ,a 1));
};

mac passthrough (a) {
    ret ,a;
};

mac getSecond (r) {
    ret (. r 1);
};

mac say (x) {
    sym (r ());
    passthrough (= r \(println_i32 ,x));
    ret r;
};

eval (sym (glob:(mac 1) ++));

custom MyMac (mac 1);

eval (fnc invokeAndRet (x:i32 m:MyMac) i32 {
    ret (m ,x);
});

mac var1 (a::variadic) {
    ret (lenOf a);
};

mac var2 (a b::variadic) {
    ret (+ 1 (lenOf b));
};

mac pp0 (a::preprocess) {
    ret \(tup ,a ,a);
};

mac pp1 (a b::(variadic preprocess)) {
    block {
        exit (!= (lenOf b) 0);
        ret ();
    };
    ret \(tup ,(. b 0) ,(. b 0));
};

mac pp++ (a::preprocess) {
    ret \(= ,a (+ ,a 1));
};

mac pe (a::plusEscape) {
    ret ,a;
};

fnc main () () {
    block {
        m1;
        m2 println_i32 100;
        m2 println_i32 (+ 100 1);
        m2 println_i32 ,(+ 100 2);
        m2 ,println_i32 (+ 100 3);
        sym (x 104);
        m2 println_i32 ,x;
        m2 println_i32 (m2 + 105);
        m3 106;
        m4 println_i32 107;
        = x 107;
        ++ x;
        println_i32 x;
        println_i32 (++ ,x);
        = x 0;
        = (++ x) 110;
        println_i32 x;
        println_i32 (passthrough 111);
        = x 112;
        println_i32 (passthrough ,x);
        = x 113;
        println_i32 (getSecond \(-1 ,x));
        say 114;
        eval (sym (y 114));
        ++ ,y;
        println_i32 y;
    };

    block {
        sym (x 199);
        println_i32 (glob ,x);
        println_i32 (glob x);
        = glob passthrough;
        = x 202;
        println_i32 (glob ,x);

        eval (sym (c0:(mac 1)));
        println_i32 (+ 203 (cast i32 (cast ptr c0)));
        = c0 ++;
        c0 x;
        println_i32 (c0 x);
        = c0 passthrough;
        = x 205;
        println_i32 (c0 ,x);
        = c0 null;
        println_i32 (+ 206 (cast i32 (cast (i32 *) c0)));

        eval (sym (c1:((mac 1) cn) c0));
        println_i32 (+ 207 (cast i32 (!= c0 c1)));
        = c0 ++;
        println_i32 (+ 207 (cast i32 (!= c0 c1)));
        println_i32 (+ 209 (cast i32 (== c0 c1)));
        = c0 c1;
        println_i32 (+ 209 (cast i32 (== c0 c1)));

        = c0 passthrough;
        println_i32 ((* (& c0)) 211);

        println_i32 (+ 212 (cast i32 (== (typeOf c0) (typeOf c1))));
        println_i32 (+ 212 (cast i32 (== ((mac 1) cn) (typeOf c1))));

        eval (sym (c2:MyMac));
        = c2 (cast MyMac passthrough);
        println_i32 (c2 214);

        println_i32 (invokeAndRet 215 c2);
        println_i32 (invokeAndRet 215 (cast MyMac ++));
    };

    block {
        println_i32 (+ 300 (var1));
        println_i32 (+ 300 (var1 x));
        println_i32 (+ 301 (var2 x));
        println_i32 (+ 301 (var2 x y));

        sym (x 303);
        pp0 (= x (+ x 1));
        println_i32 x;

        pp1 (= x -1);
        pp1 x (= x (+ x 1));
        println_i32 x;

        pp++ x;
        println_i32 x;

        eval (sym (y 306));
        pp++ y;
        println_i32 y;

        println_i32 (. (pe {foo bar 308}) 2);
    };
};