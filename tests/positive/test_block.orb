import "util/io.orb";

fnc main () () {
    sym (a null);
    block {
        sym (a 100);
        println_i32 a;
    };

    block () {
        println_i32 101;
    };

    block () () {
        println_i32 200;
        exit false;
        println_i32 201;
        exit true;
        println_i32 -1;
    };

    sym (b 300);
    block {
        loop false;
        println_i32 b;
        loop (< (= b (+ b 1)) 303);
    };

    println_i32 (
        block i32 { pass 400; }
    );

    println_i32 (
        block i32 { pass 401:i16; }
    );

    block b0 () {
        block {
            println_i32 500;
            exit b0 true;
        };
        println_i32 -1;
    };

    sym (c false);
    block b0 () {
        exit c;
        = c true;
        block {
            println_i32 501;
            loop b0 true;
        };
        println_i32 -1;
    };

    println_i32 (
        block b0 i32 {
            block {
                pass b0 502;
            };
            pass -1;
        };
    );

    block () () {
        sym x:i32;
        block b0 () {
            + (= x 600) (block i32 { exit b0 true; = x -1; pass 0; }) (= x -1);
        };
        println_i32 x;
    };

    block b0 () {
        println_i32 601;
        loop (block bool { exit b0 true; pass true; });
    };

    sym (d 690);
    println_i32 (
        block b0 i32 {
            = d (+ d 1);
            loop (< d 700);
            pass d;
        };
    );

    = d 690;
    block b0 () {
        block i32 {
            = d (+ d 1);
            loop (< d 701);
            exit b0 true;
            # this pass is necessary, since compilation doesn't know of unconditional jumps
            # TODO make the compilation aware of unconditional jumps
            pass -1;
        };
    };
    println_i32 d;

    = d 800;
    block b0 () {
        = d (block i32 {
            pass (block i32 {
                exit b0 true;
                pass -1;
            });
        });
    };
    println_i32 d;

    = d -1;
    block b0 () {
        = d (block i32 {
            pass (block i32 {
                exit b0 false;
                pass 801;
            });
        });
    };
    println_i32 d;
};