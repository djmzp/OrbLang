import "../libs/base.orb";
import "util/io.orb";

data Foo {
    x:i32
    y:i32
};

sym (globArr (eval (arr i32 603 -1)));

fnc main () () {
    if true {
        println_i32 100;
    };
    if false {
        println_i32 -1;
    };
    if true {
        println_i32 101;
    } {
        println_i32 -1;
    };
    if false {
        println_i32 -1;
    } {
        println_i32 102;
    };

    while true {
        println_i32 200;
        break;
    };
    for (sym (i 0)) (< i 3) (++ i) {
        if (== i 0) { continue; };
        println_i32 (+ 200 i);
    };
    range i 2 {
        println_i32 (+ i 203);
    };
    range i 205 206 {
        println_i32 i;
    };
    range i 207 207 {
        println_i32 i;
    };
    range i 1 {
        println_i32 208;
    };
    range i 0 {
        println_i32 -1;
    };
    rangeRev i 2 {
        println_i32 (- 210 i);
    };
    rangeRev i 1 {
        println_i32 211;
    };
    rangeRev i 2 {
        if (> i 0) { continue; };
        println_i32 212;
    };
    rangeRev i 2 0 {
        println_i32 (+ 213 (- 2 i));
    };
    rangeRev i 1 1 {
        println_i32 216;
    };
    rangeRev i 0 0 {
        println_i32 217;
    };
    rangeRev i 2 0 {
        if (> i 0) { continue; };
        println_i32 218;
    };
    repeat 2 {
        println_i32 219;
    };
    repeat 1 {
        println_i32 220;
    };
    repeat 0 {
        println_i32 -1;
    };

    block {
        sym (x 299);
        println_i32 (++ x);
        = x 303;
        println_i32 (-- (-- x));

        println_i32 (?_ true (++ x) -1);
        println_i32 (?_ false -1 (++ x));

        println_i32 (+= x 1);
        println_i32 (-= x -1);
        ++ x;
        println_i32 (*= (*= x -1) -1);
        ++ x;
        println_i32 (/= (*= x 2) 2);
        = x 18; %= x 10;
        println_i32 (+ 300 x);
        = x 1; <<= x 2;
        println_i32 (+ 305 x);
        = x (<< 10 2); >>= x 2;
        println_i32 (+ 300 x);
        = x 0b1111; &= x 0b1011; # 0b1011 = 11
        println_i32 (+ 300 x);
        = x 0b1000; |= x 0b0100; # 0b1100 = 12
        println_i32 (+ 300 x);
        = x 0b1100; ^= x 0b1010; # 0b0110 = 6
        println_i32 (+ 307 x);
    };

    block {
        sym a:(i32 i32 i32);

        sym (b (tup (& a) 0));
        = (. a 0) 400;
        println_i32 (-> (. b 0) 0);

        sym (c (tup (& b) 0));
        = (. a 1) 401;
        println_i32 (-> (. c 0) 0 1);

        sym (d (& c));
        = (. a 2) 402;
        println_i32 (-> d 0 0 2);

        sym p:Foo;

        sym (q (& p));
        = (. p x) 403;
        println_i32 (-> q x);
    };

    block {
        sym x:i32;

        if (&& true true) { println_i32 500; };
        if (&& false true) { println_i32 -1; };
        if (&& true false) { println_i32 -1; };
        if (&& false false) { println_i32 -1; };

        if (&& true true true true) { println_i32 501; };
        if (&& true true false true) { println_i32 -1; };

        && (cast bool (= x 502)) false (cast bool (= x -1));
        println_i32 x;

        && (cast bool (++ x)) true;
        println_i32 x;

        if (|| true true) { println_i32 504; };
        if (|| false true) { println_i32 505; };
        if (|| true false) { println_i32 506; };
        if (|| false false) { println_i32 -1; };

        if (|| true true true true) { println_i32 507; };
        if (|| false false true false) { println_i32 508; };

        || (cast bool (= x 509)) (cast bool (= x -1));
        println_i32 x;

        || (cast bool (++ x)) true;
        println_i32 x;
    };

    block {
        sym (a (arr i32 600));
        println_i32 ([] a 0);

        sym (b (arr i32 601 602:i16));
        println_i32 ([] b 0);
        println_i32 ([] b 1);

        println_i32 ([] globArr 0);
    };

    block {
        sym (a (make Foo (x 700) (y 701)));
        println_i32 (. a x);
        println_i32 (. a y);

        = a (make Foo (y 702));
        println_i32 (. a y);
    };
};