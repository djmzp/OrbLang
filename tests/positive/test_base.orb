import "base.orb";
import "util/print.orb";

data Foo {
    x:i32
    y:i32
};

data Bar {
    x:i32
} (lam (this:Bar::noDrop) () { println_i32 ([] this x); });

sym (globStr:String "Hello!");
sym (globArr (eval (arr i32 603 -1)));
sym (globTup (eval (tup 704 -1)));

enum Baz {
    zero
    one
    two
};

enum Zab u8 {
    (a 97)
    b
};

fnc main () () {
    println_str globStr;

    if true {
        println_i32 100;
    };
    if false {
        println_i32 -1;
    };
    if true {
        println_i32 101;
    } {
        println_i32 -1;
    };
    if false {
        println_i32 -1;
    } {
        println_i32 102;
    };
    if true {
        println_i32 103;
    } true {
        println_i32 -1;
    };
    if false {
        println_i32 -1;
    } false {
        println_i32 -1;
    } {
        println_i32 104;
    };
    if false {
        println_i32 -1;
    } true {
        println_i32 105;
    } false {
        println_i32 -1;
    };
    if false {
        println_i32 -1;
    } true {
        println_i32 106;
    } false {
        println_i32 -1;
    } {
        println_i32 -1;
    };

    while true {
        println_i32 200;
        break;
    };
    for (sym (i 0)) (< i 3) (++ i) {
        if (== i 0) { continue; };
        println_i32 (+ 200 i);
    };
    range i 2 {
        println_i32 (+ i 203);
    };
    range i 205 206 {
        println_i32 i;
    };
    range i 207 207 {
        println_i32 i;
    };
    range i 1 {
        println_i32 208;
    };
    range i 0 {
        println_i32 -1;
    };
    rangeRev i 2 {
        println_i32 (- 210 i);
    };
    rangeRev i 1 {
        println_i32 211;
    };
    rangeRev i 2 {
        if (> i 0) { continue; };
        println_i32 212;
    };
    rangeRev i 2 0 {
        println_i32 (+ 213 (- 2 i));
    };
    rangeRev i 1 1 {
        println_i32 216;
    };
    rangeRev i 0 0 {
        println_i32 217;
    };
    rangeRev i 2 0 {
        if (> i 0) { continue; };
        println_i32 218;
    };
    range i 0 3 2 {
        println_i32 (+ 219 (/ i 2));
    };
    rangeRev i 2 0 2 {
        if (>= i 2) { continue; };
        println_i32 (+ 221 i);
    };
    repeat 2 {
        println_i32 222;
    };
    repeat 1 {
        println_i32 223;
    };
    repeat 0 {
        println_i32 -1;
    };
    block {
        sym (x 3);
        repeat {
            = x (- x 1);
            if (== x 0) {
                break;
            };
        };
    };

    block {
        sym (x 299);
        println_i32 (++ x);
        = x 303;
        println_i32 (-- (-- x));

        println_i32 (+= x 1);
        println_i32 (-= x -1);
        ++ x;
        println_i32 (*= (*= x -1) -1);
        ++ x;
        println_i32 (/= (*= x 2) 2);
        = x 16; %= x 10;
        println_i32 (+ 300 x);
        = x 1; <<= x 2;
        println_i32 (+ 303 x);
        = x (<< 8 2); >>= x 2;
        println_i32 (+ 300 x);
        = x 0b1111; &= x 0b0101; # 0b0101 = 5
        println_i32 (+ 304 x);
        = x 0b1000; |= x 0b0010; # 0b1010 = 10
        println_i32 (+ 300 x);
        = x 0b1100; ^= x 0b1010; # 0b0110 = 6
        println_i32 (+ 305 x);
    };

    block {
        sym a:(i32 i32 i32);

        sym b:(((i32 i32 i32) *) i32);
        = ([] b 0) (& a);
        = ([] a 0) 400;
        println_i32 (-> ([] b 0) 0);

        sym c:(((((i32 i32 i32) *) i32) *) i32);
        = ([] c 0) (& b);
        = ([] a 1) 401;
        println_i32 (-> ([] c 0) 0 1);

        sym (d (& c));
        = ([] a 2) 402;
        println_i32 (-> d 0 0 2);

        sym p:Foo;

        sym (q (& p));
        = ([] p x) 403;
        println_i32 (-> q x);
    };

    block {
        sym x:i32;

        if (&& true true) { println_i32 500; };
        if (&& false true) { println_i32 -1; };
        if (&& true false) { println_i32 -1; };
        if (&& false false) { println_i32 -1; };

        if (&& true true true true) { println_i32 501; };
        if (&& true true false true) { println_i32 -1; };

        && (cast bool (= x 502)) false (cast bool (= x -1));
        println_i32 x;

        && (cast bool (++ x)) true;
        println_i32 x;

        if (|| true true) { println_i32 504; };
        if (|| false true) { println_i32 505; };
        if (|| true false) { println_i32 506; };
        if (|| false false) { println_i32 -1; };

        if (|| true true true true) { println_i32 507; };
        if (|| false false true false) { println_i32 508; };

        || (cast bool (= x 509)) (cast bool (= x -1));
        println_i32 x;

        || (cast bool (++ x)) true;
        println_i32 x;
    };

    block {
        sym (a (arr i32 600));
        println_i32 ([] a 0);

        sym (b (arr i32 601 602:i16));
        println_i32 ([] b 0);
        println_i32 ([] b 1);

        println_i32 ([] globArr 0);
    };

    block {
        sym (a (tup 700 701));
        println_i32 ([] a 0);
        println_i32 ([] a 1);

        sym (b (tup 702 703:i16));
        println_i32 ([] b 0);
        println_i32 ([] b 1);

        println_i32 ([] globTup 0);
    };

    block {
        sym (a (make Foo (x 800) (y 801)));
        println_i32 ([] a x);
        println_i32 ([] a y);

        = a (make Foo (y 802));
        println_i32 ([] a y);
    };

    block {
        (lam { println_i32 900; });
        println_i32 ((lam i32 { ret 901; }));
        println_i32 ((lam (x:i32) i32 { ret x; }) 902);

        (pat { ret \(println_i32 903); });
        (pat (x) { ret \(println_i32 ,x); }) 904;
    };

    block {
        make Bar (x 1000);
    };

    block {
        passthrough (make Bar (x 1100));

        process \(println_i32 1101);

        typeOf (escape x);

        sym (x 1102);
        println_i32 ((escape x));
    };
    block {
        println_i32 (+ 1102 (cast i32 (base.isRaw ())));
        println_i32 (+ 1104 (cast i32 (base.isRaw (+ 999 9))));
        eval (sym (r ()));
        println_i32 (+ 1104 (cast i32 (base.isRaw r)));
        sym (x 999);
        println_i32 (+ 1106 (cast i32 (base.isRaw x)));
        = x 1107;
        = r (base.makeRawWith x 1108);
        println_i32 ([] r 0);
        println_i32 ([] r 1);
    };
    block {
        cond false 
            (something that would not compile !!!)
            (println_i32 1109);
        cond true
            (println_i32 1110)
            (this also would not compile !!!);
        cond false
            (i am error !!!);
        cond true
            (println_i32 1111);
    };
    block {
        sym (x 1112);
        println_i32 (unref x);
    };

    block {
        arr Bar (make Bar (x 1200));
    };

    block {
        tup (make Bar (x 1301)) (make Bar (x 1300));
    };

    block {
        alias MyI32 i32;
        sym x:MyI32;
        = x 1400;
        println_i32 x;
    };

    block {
        sym x:Baz (y Baz.one);
        println_i32 (+ 1500 (cast i32 x));
        println_i32 (+ 1500 (cast i32 y));
        = x y;
        println_i32 (+ 1500 (cast i32 (+ x y)));
        if (== (+ x y) Baz.two) {
            println_i32 1503;
        };

        println_i32 (+ 1501 (base.enumSize Baz));

        println_c8 (cast c8 Zab.a);
        println_c8 (cast c8 Zab.b);
    };

    block {
        sym x:i32 y:i32;

        = x y 1600;
        switch x
            (y) {
                println_i32 x;
            };
        
        = x 2;
        switch x
            (0 1) {
                println_i32 -1;
            } (1 2) {
                println_i32 1601;
            };
        
        = x 2;
        switch x
            (0 1) {
                println_i32 -1;
            } {
                println_i32 1602;
            };
    };
};