# TODO+ eval tests (get memb/elem of non-ref; raw unsafety; drop on global returned)
# TODO+ verify base.orb and examples

import "util/io.orb";

data Foo;

fnc dropFoo (val:Foo::noDrop) ();

data Foo {
    x:i32
}::((drop dropFoo));

fnc dropFoo (val:Foo::noDrop) () {
    println_i32 (. val x);
};

data Bar {
    f0:Foo
    f1:Foo
};

fnc foo0 (x:i32) () {
    sym f:Foo;
    = (. f x) x;
};

fnc foo1 (x:i32) () {
    block {
        sym f:Foo;
        = (. f x) x;
        ret;
    };
    sym f:Foo;
};

fnc foo2 (f:Foo::noDrop) () {
    cast (Foo cn) f;
};

fnc foo3 (f:(Foo cn)::noDrop) () {
};

fnc foo4 (f:Foo) () {
};

fnc foo5 (f:(Foo cn)) () {
};

fnc foo6 (f:Foo x:i32) () {
    sym f0:Foo;
    = (. f0 x) x;
};

fnc foo7 (x:i32) Foo {
    sym f:Foo;
    = (. f x) x;
    ret (>> f);
};

fnc foo8 (x:i32) Foo {
    ret (block Foo {
        sym f:Foo;
        = (. f x) x;
        pass (>> f);
    });
};

mac foo9 (x) {
    ret x;
};

mac foo10 (x::preprocess) {
    ret \(block {
        sym (f0 ,x) (f1 ,x);
    });
};

fnc main () () {
    block {
        sym f:Foo;
        = (. f x) 100;
    };

    block {
        sym f0:Foo f1:Foo;
        = (. f0 x) 201;
        = (. f1 x) 200;
    };

    block {
        sym f0:Foo;
        = (. f0 x) 300;
        exit true;
        sym f1:Foo;
    };

    block {
        sym f0:Foo;
        = (. f0 x) 401;
        exit false;
        sym f1:Foo;
        = (. f1 x) 400;
    };

    sym i:i32;

    = i -1;
    block {
        = i (+ i 1);
        sym f0:Foo;
        = (. f0 x) (+ 500 (* 2 i));
        loop (== i 0);
        sym f1:Foo;
        = (. f1 x) 501;
    };

    block b0 i32 {
        block {
            sym f0:Foo;
            = (. f0 x) 600;
            pass b0 0;
        };
        pass 0;
    };

    block b0 () {
        sym f0:Foo;
        = (. f0 x) 701;
        block {
            sym f0:Foo;
            = (. f0 x) 700;
            exit b0 true;
        };
        sym f1:Foo;
    };

    block {
        sym f:(Foo 2);
        = (. ([] f 0) x) 801;
        = (. ([] f 1) x) 800;
        [] f 0;
    };

    block {
        sym f:(Foo Foo);
        = (. f 0 x) 901;
        = (. f 1 x) 900;
        . f 0;
    };

    block {
        sym b:Bar;
        = (. b f0 x) 1001;
        = (. b f1 x) 1000;
        . b f0;
    };

    foo0 1100;

    foo1 1200;

    block {
        sym f:Foo;
        cast Foo f;
        = (. f x) 1300;
    };

    block {
        sym f:Foo;
        = (. f x) 1400;
        foo2 f;
        foo3 f;
    };

    block {
        sym f0:Foo f1:Foo;
        = (. f0 x) 1500;
        = f1 (>> f0);
    };

    block {
        sym f0:Foo;
        = (. f0 x) 1600;
        sym (f1:(Foo cn) (>> f0));
    };

    block {
        sym f:Foo;
        = (. f x) 1700;
        foo4 (>> f);
        = (. f x) 1701;
        foo5 (>> f);
    };

    block {
        sym f:Foo;
        = (. f x) 1801;
        foo6 (>> f) 1800;
    };

    block Foo {
        sym f:Foo;
        = (. f x) 1900;
        pass (>> f);
    };

    foo7 2000;

    foo8 2100;

    cast (Foo cn) (foo7 2200);

    foo9 ,(foo7 2300);

    foo10 (foo7 2400);

    >> (foo7 2500);
};