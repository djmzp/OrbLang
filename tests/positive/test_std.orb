import "std/print.orb";
import "std/One.orb";
import "std/List.orb";
import "util/print.orb";

data Foo {
    x:i32
} (lam (this:Foo::noDrop) () {
    println_i32 ([] this x);
});

fnc makeFoo (x:i32) Foo {
    sym f:Foo;
    = ([] f x) x;
    ret f;
};

fnc main () () {
    block {
        std.println -1:i8;
        std.println -2:i16;
        std.println -3:i32;
        std.println -4:i64;

        std.println 1:u8;
        std.println 2:u16;
        std.println 3:u32;
        std.println 4:u64;

        std.println 'a';

        std.println "hello";

        std.print 1 2 3;
        std.println 4 5 6;
        std.println;
    };

    block {
        sym x:(std.One i32);
        if (std.isNull x) {
            println_i32 100;
        };
    };
    block {
        sym (x (std.makeOne i32));
        if (std.isNull x) {
            println_i32 -1;
        };
        = (std.* x) 101;
        println_i32 (std.* x);

        = x (std.makeOne i32);
        println_i32 (+ 102 (* (std.getPtr x)));
    };
    block {
        sym (f (std.makeOne Foo));
        = (std.-> f x) 103;
    };
    block {
        sym x:(std.One u32);
        if (!= (typeOf (std.* x)) u32) {
            println_i32 -1;
        };
        if (!= (std.getValTy x) u32) {
            println_i32 -1;
        };
    };
    block {
        sym (f (std.makeOne (Foo 2)));
        = ([] (std.* f) 0 x) 105;
        = ([] (std.* f) 1 x) 104;
    };

    block {
        sym x:(std.List i32);
        if (std.isEmpty x) {
            println_i32 200;
        };
        = x (std.makeList i32 1);
        if (std.isEmpty x) {
            println_i32 -1;
        };
        println_i32 (cast i32 (+ 200 (std.getLen x)));
        = (std.[] x 0) 202;
        println_i32 (std.[] x 0);
        if (!= (typeOf (std.[] x 0)) i32) {
            println_i32 -1;
        };
    };
    block {
        sym (x (std.makeListWith i32 -1 203 -1 -1));
        println_i32 (std.[] x 1);
        println_i32 (cast i32 (+ 200 (std.getLen x)));
    };
    block {
        sym (x (std.makeList u32 1));
        if (!= (typeOf (std.[] x 0)) u32) {
            println_i32 -1;
        };
        if (!= (std.getElemTy x) u32) {
            println_i32 -1;
        };
        if (> (std.getLen x) (std.getCap x)) {
            println_i32 -1;
        };
    };
    block {
        sym (x (std.makeListWith i32 205 206 207));
        println_i32 (std.getFront x);
        println_i32 ([] (std.getArrPtr x) 1);
        println_i32 (std.getBack x);
    };
    block {
        sym (x (std.makeListWith i32 208 209 210 211 212));
        std.range it x {
            println_i32 (it);
        };
    };
    block {
        sym (x (std.makeListWith i32 217 216 215 214 213));
        std.rangeRev it x {
            println_i32 (it);
        };
    };
    block {
        sym x:(std.List i32);
        std.resize x 8;
        println_i32 (cast i32 (+ 210 (std.getLen x)));
        std.resize x 8;
        println_i32 (cast i32 (+ 211 (std.getLen x)));
        std.resize x 1;
        println_i32 (cast i32 (+ 219 (std.getLen x)));
    };
    block {
        sym x:(std.List i32);
        std.reserve x 8;
        if (< (std.getCap x) 8) {
            println_i32 -1;
        };
        std.reserve x 8;
        if (< (std.getCap x) 8) {
            println_i32 -1;
        };
        std.reserve x 2;
        if (< (std.getCap x) 8) {
            println_i32 -1;
        };
    };
    block {
        sym x:(std.List i32);
        std.push x 221;
        println_i32 (std.getBack x);
        std.push x 222;
        println_i32 (std.getBack x);
        std.push x 223;
        std.push x -1;
        std.pop x;
        println_i32 (std.getBack x);
    };
    block {
        sym (x (std.makeList i32 4));
        std.clear x;
        if (!= (std.getLen x) 0) {
            println_i32 -1;
        };
    };
    block {
        sym (x (std.makeList Foo 2));
        = ([] (std.[] x 0) x) 225;
        = ([] (std.[] x 1) x) 224;
    };
    block {
        sym x:(std.List Foo);
        std.resize x 3;
        = ([] (std.[] x 0) x) 230;
        = ([] (std.[] x 1) x) 229;
        = ([] (std.[] x 2) x) 227;
        std.push x (makeFoo 226);
        std.pop x;
        std.resize x 2;
        std.push x (makeFoo 228);
    };
    block {
        sym (x (std.makeListWith Foo (makeFoo 232) (makeFoo 231)));
        std.clear x;
        std.push x (makeFoo 233);
    };
    block {
        sym x:(std.List (Foo 2));
        std.push x (arr Foo (makeFoo 235) (makeFoo 234));
    };
};