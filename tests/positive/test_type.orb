import "util/print.orb";

custom myI32 i32;
custom myI32Cn (i32 cn);
custom myI64Cn (i64 cn);
custom myI32Arr (i32 4);
custom myI32P (i32 *);
custom myI32ArrP (i32 []);
custom myI32Tup (i32 i32);
custom myMyI32P (myI32 *);
custom myRaw raw;

eval (sym (hello:((c8 cn []) cn) "hello"));
eval (sym (ola:((c8 cn) []) "ola"));

fnc main () () {
    sym p:i32;

    eval (sym (ty0 i32));
    eval (sym (a:ty0 100));
    println_i32 (eval a);

    eval (sym (id0 \cn));
    eval (sym (b:(i32 id0) 101));
    println_i32 (eval b);

    eval (sym (l0 4));
    eval (sym c:(i32 l0));
    eval (= ([] c 0) 102);
    println_i32 (eval ([] c 0));

    eval (sym d:(ty0 (= ty0 bool)));
    = (. d 0) 103;
    println_i32 (eval (. d 0));

    eval (= ty0 i32);
    = p 200;
    eval (block {
        exit (== ty0 i32);
        = p -1;
    });
    println_i32 p;

    = p 201;
    eval (block {
        exit (!= ty0 (i32 cn));
        = p -1;
    });
    println_i32 p;

    = p 300;
    block {
        exit (== (typeOf 100) i32);
        = p -1;
    };
    println_i32 p;

    = p 301;
    block {
        exit (!= (typeOf p) (i32 cn));
        = p -1;
    };
    println_i32 p;

    = p 302;
    block {
        exit (== (typeOf \()) raw);
        = p -1;
    };
    println_i32 p;

    block {
        sym x:(i32 3);
        println_i32 (+ 300 (lenOf x));
        println_i32 (+ 300 (lenOf (i32 4)));
        println_i32 (+ 300 (lenOf (i32 4 cn)));
        println_i32 (+ 300 (lenOf ((i32 4) cn)));
        println_i32 (+ 300 (lenOf (i32 4 4)));
        println_i32 (+ 300 (lenOf ((i32 4) 4)));
        println_i32 (+ 300 (lenOf (i32 4 4 cn)));
    };

    block {
        sym x:(c8 c8 c8 c8 c8);
        println_i32 (+ 300 (lenOf x));
        println_i32 (+ 300 (lenOf (c8 c8 c8 c8 c8 c8)));
        println_i32 (+ 300 (lenOf ((c8 c8 c8 c8 c8 c8) cn)));
    };

    block {
        eval (sym x:raw);
        println_i32 (+ 307 (lenOf x));
        eval (= x \(() () ()));
        println_i32 (+ 305 (lenOf x));
    };

    block {
        println_i32 (+ 308 (lenOf ""));
        println_i32 (+ 305 (lenOf "abcd"));
    };

    block {
        sym x:c8 (y:(i16 cn) 0);
        println_i32 (+ 399 (sizeOf x));
        println_i32 (+ 399 (sizeOf y));
        println_i32 (+ 398 (sizeOf i32));
        eval (sym z:i32);
        println_i32 (+ 399 (eval (sizeOf z)));
        println_i32 (+ 400 (eval (sizeOf u32)));
    };

    block {
        sym a:myI32;
        = a (cast myI32 500);
        println_i32 (cast i32 a);

        sym (b:myI32Cn (cast myI32Cn 501));
        println_i32 (cast i32 b);

        sym c:myI32Arr;
        = ([] c 0) 502;
        println_i32 ([] c 0);

        sym x0:i32;
        sym (d:myI32P (cast myI32P (& x0)));
        = (* d) 503;
        println_i32 (* d);

        sym x1:(i32 4);
        sym (e:myI32ArrP (cast myI32ArrP (& x1)));
        = ([] e 0) 504;
        println_i32 ([] e 0);

        sym f:myI32Tup;
        = (. f 0) 505;
        println_i32 (. f 0);

        sym (g:myMyI32P (cast myMyI32P (& a)));
        = (* g) (cast myI32 506);
        println_i32 (cast i32 (* g));

        println_i32 (+ 503 (lenOf c));
        println_i32 (+ 506 (lenOf f));

        eval (sym (h:myRaw (cast myRaw \(() ()))));
        println_i32 (+ 507 (lenOf h));

        sym i:myI32;
        println_i32 (+ 510 (cast i32 i));

        eval (sym j:myI32);
        println_i32 (+ 511 (cast i32 j));

        eval (sym (x2:i32 512));
        eval (sym (k:myI32P (cast myI32P (& x2))));
        println_i32 (* (cast (i32 *) k));

        = i (cast (myI32 cn) 513);
        println_i32 (cast (i32 cn) i);

        eval (sym (l:myI32Cn (cast myI32Cn 514)));
        eval (sym (m:myI64Cn (cast myI64Cn l)));
        println_i32 (cast i32 m);

        sym n:(custom::global GlobalInLocal i32);
        = n (cast (typeOf n) 515);
        println_i32 (cast i32 n);
    };

    block {
        sym (x:i32 600);
        sym (p:((i32 *) cn) (& x));
        println_i32 (* p);

        sym y:(i32 4);
        = ([] y 0) 601;
        sym (a (cast ((i32 []) cn) (& y)));
        println_i32 ([] a 0);

        sym (z:((i32 cn) cn) 602:i32);
        println_i32 z;

        println_c8 ([] hello 0);
        println_str hello;

        println_c8 ([] ola 0);
        println_str ola;
    };
};