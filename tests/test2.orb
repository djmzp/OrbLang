import "tests/io.orb";

fnc foo() {
    (println_i64 10);
}

fnc bar() {
    for (;;) ret;
}

fnc inc(a:i64) i64 {
    ret (+ a 1);
}

fnc blocker() i64 {
    while (true);
    ret 0;
}

fnc fib(n:u32) {
	switch (n) {
	case 0, 1:
		(println_i32 1);
	case 2, 3:
		(println_u32 n);
	case 4:
		let (n:i32 5);
		(println_i32 n);
	case 5:
		let (n:i32 8);
		(println_i32 n);
	else:
		(println_i32 (- 1));
	}
}

fnc abc(n:i32) {
	switch (n) {
	case 1:
		(println_i32 65);
	else:
		(println_i32 63);
	case 2:
		(println_i32 66);
	case 3:
		(println_i32 67);
	}
}

fnc main() {
    let (a:i64 1) (b:i64 2);
    if ((== a b)) (println_i64 101);
    if ((< a b)) (println_i64 102);
    if ((>= a b)) (println_i64 103);
    if ((> (+ a 3) (+ b 5))) (println_i64 104);
    if (let (x:i64 5); (> x a)) (println_i64 105);
    if ((= a 100); (> a b)) (println_i64 106);

    (= a 1);
    (= b 2);
    if ((< a b)) (println_i64 107);
    else (println_i64 108);
    if ((== a b)) (println_i64 109);
    else (println_i64 110);
    if ((== (/ a b) 1)) (println_i64 111);
    else if ((== (* a b) 1)) (println_i64 112);
    else (println_i64 113);
    if ((== (+ a b) 3)) {
        (println_i64 114);
        if ((== (% a b) 1)) {
            (println_i64 115);
        } else {
            (println_i64 116);
        }
    }

    if ((cast i32 0); true) (println_i64 117);

    for (let (i:i64 0) (j:i64 (- 1)); (< i 10); (++ i)) (println_i64 (+ i j));
    for ((= a 0); (< a 3); (++ a)) (println_i64 a);
    for (; (>= a 0); (-- a)) (println_i64 a);

    while ((>= b 0)) (println_i64 (-- b));
    do {
        let (x:i64 2);
        (println_i64 b);
        (= b (+ b x));
    } while ((< (+ b a) 8));
    do (println_i64 1); while ((>= (-- a) 0));
    do ; while ((> a 0));

    (bar);

    for (let (i:i32 0); (< i 10); (++ i)) {
        if ((>= i 3)) break;
        (println_i32 i);
    }

    while ((<= a 0)) {
        if ((<= a (- 3))) break;
        (println_i64 a);
        (-- a);
    }

    do {
        if ((== a 0)) break;
        (println_i64 a);
        (= a 0);
    } while ((< a 1));

    for (let (i:i32 0); (< i 10); (++ i)) {
        if ((>= i 2)) continue;
        (println_i32 i);
    }

    while ((<= a 0)) {
        (++ a);
        if ((> a 0)) continue;
        (println_i64 a);
    }

    (= a 99);
    do {
        if ((== a 0)) continue;
        (println_i64 a);
        (= a 0);
    } while ((!= a 0));

    for (let (i:i32 0); (< i 2); (++ i)) {
        (println_i32 i);
        for (let (j:i32 0); (< j 5); (++ j)) {
            (println_i32 j);
            if ((>= j 1)) break;
        }
    }

    for (let (i:i32 0); (> i (- 2)); (-- i)) {
        (println_i32 i);
        for (let (j:i32 0); (> j (- 5)); (-- j)) {
            if ((<= j (- 1))) continue;
            (println_i32 j);
        }
    }

    for (let (i:i32 10); (< i 15); (++ i)) {
        (println_i32 i);
        if ((>= i 11)) break;
        for (let (j:i32 10); (< j 12); (++ j)) {
            (println_i32 j);
        }
    }

    for (let (i:i32 (- 10)); (> i (- 13)); (-- i)) {
        (println_i32 i);
        if ((<= i (- 11))) continue;
        for (let (j:i32 (- 10)); (> j (- 12)); (-- j)) {
            (println_i32 j);
        }
    }

    (println_i64 (inc b));
    (println_i64 (+ (inc b) 1));

    if ((> 1 0)) (println_i64 0); else (println_i64 (blocker));
    if ((< 1 0)) (println_i64 (blocker)); else (println_i64 0);

    if ((and false (== (blocker) 0))) (println_i32 0);
    if ((or true (== (blocker) 0))) (println_i32 0);

	switch ((+ 1 1)) {
	case 2:
	}

	switch ((+ 1 1)) {
	case 3:
        (blocker);
	}

	switch ((- 1)) {
	else:
		(println_i32 (- 1));
	}

	switch ((- 1)) {
	else:
		switch ((- 1)) {
        case (- 1):
            (println_i32 0);
        }
	}

    (fib 0);
    (fib 3);
    (fib 5);
    (fib 8);

    (abc 1);
    (abc 2);
    (abc (- 1));
}