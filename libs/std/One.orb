import "std/common.orb";

mac std.getValTy (one::preprocess) {
    ret (attrOf (typeOf one) std.valTy);
};

eval (fnc std.One (valTy:type defineDrop:bool) type {
    sym (name (+ \std.One (cast id valTy)));

    if (! (?? ,name)) {
        data::global ,name {
            -p:(valTy *)
        }::((std.class std.One) (std.valTy ,valTy))
            (cond defineDrop
                (std.defineDrop ,name)
                (fnc::global std.-dropOne::(compilable (evaluable false)) (this:,name::noDrop) ()));
    };

    ret (name);
});

eval (fnc std.One (valTy:type) type {
    ret (std.One valTy true);
});

mac (+ \std.-defineDrop \std.One) (oneTy::preprocess) {
    # define function here and return it (intentionally not escaped)
    ret (fnc::global std.-dropOne::(compilable (evaluable false)) (this:oneTy::noDrop) () {
        if (!= ([] this -p) null) {
            >>::noZero (* ([] this -p));
        };
        free (cast ptr ([] this -p));
    });
};

mac std.makeOne (valTy::preprocess) {
    base.assertIsOfType valTy type;

    sym (oneTy (std.One valTy));

    ret \(block ,oneTy {
        sym x:,oneTy;
        # TODO check if setting all bytes to zero portably zeroes any type
        = ([] x -p) (cast ,(valTy *) (calloc 1 ,(sizeOf valTy)));
        pass x;
    });
};

mac std.makeOneWith (val::preprocess) {
    sym (valTy (typeOf val));
    sym (oneTy (std.One valTy));

    ret \(block ,oneTy {
        sym x:,oneTy;
        = ([] x -p) (cast ,(valTy *) (malloc ,(sizeOf valTy)));
        = (* ([] x -p))::noDrop ,val;
        pass x;
    });
};

mac std.* (one::preprocess) {
    ret \(* ([] ,one -p));
};

mac std.-> (one::preprocess ind) {
    ret \([] (* ([] ,one -p)) ,ind);
};

mac std.isNull (one::preprocess) {
    ret \(== ([] ,one -p) null);
};

mac std.getPtr (one::preprocess) {
    ret \(unref ([] ,one -p));
};