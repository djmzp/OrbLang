eval (sym (base.-widestU:(type cn) u64));

eval (sym (base.-genIdToken 0:base.-widestU));

eval (fnc genId () id {
    sym (s (+ \base.-genId (cast id base.-genIdToken)));
    = base.-genIdToken (+ base.-genIdToken 1);
    ret s;
});

mac alias (name ty) {
    ret \(eval (sym (,name:(type cn) ,ty)));
};

alias String (c8 cn []);

mac passthrough (node) {
    ret node;
};

mac process (node::preprocess) {
    ret node;
};

mac escape (node::plusEscape) {
    ret node;
};

mac base.isOfType (val::preprocess ty::preprocess) {
    block {
        exit (== (typeOf val) ty);
        exit (== (typeOf val) (ty cn));
        ret false;
    };
    ret true;
};

mac base.isRaw (val::preprocess) {
    ret (base.isOfType val raw);
};

mac base.isEmptyRaw (val::preprocess) {
    block {
        exit (! (base.isRaw val));
        exit (!= (lenOf val) 0);
        ret true;
    };
    ret false;
};

mac base.makeRawWith (vals::(variadic preprocess)) {
    ret \(escape ,vals);
};

mac base.assertIsOfType (val::preprocess ty::preprocess) {
    block {
        exit (base.isOfType val ty);
        message::error val::loc "Value is not of type '" ty "'.";
    };

    ret ();
};

mac unref (val::preprocess) {
    ret \(block ,(typeOf val) {
        # forbids usage on owning
        sym (t ,val);
        pass t;
    });
};

mac cond (cond_::preprocess onTrue onFalse) {
    block {
        exit (! cond_);
        ret onTrue;
    };
    ret onFalse;
};

mac cond (cond_::preprocess onTrue) {
    ret \(cond ,cond_ ,onTrue ());
};

mac if (cond then) {
    ret \(block {
        (exit (! ,cond))
        (block ,then)
    });
};

mac if (cond then rest0 rest::variadic) {
    sym (args (+ \(,cond ,then ,rest0) rest));

    sym (innerCode {}) (i 0:base.-widestU);
    block {
        exit (> i (- (lenOf args) 2));

        = innerCode (+ innerCode \{
            (block {
                (exit (! ,([] args i)))
                (block ,([] args (+ i 1)))
                (exit base.-blockIf true)
            })
        });

        = i (+ i 2);
        loop true;
    };

    block {
        exit (== (% (lenOf args) 2) 0);
        = innerCode (+ innerCode \{
            (block ,([] args (- (lenOf args) 1)))
        });
    };

    ret \(block base.-blockIf () ,innerCode);
};

mac while (cond body) {
    ret \(block base.-blockLoop () {
        (block base.-blockLoopInner () {
            (exit base.-blockLoop (! ,cond))
            (block ,body)
        })
        (loop true)
    });
};

mac for (init cond step body) {
    ret \(block base.-blockLoop () {
        ,init
        (block {
            (block base.-blockLoopInner () {
                (exit base.-blockLoop (! ,cond))
                (block ,body)
            })
            ,step
            (loop true)
        })
    });
};

mac break () {
    ret \(exit base.-blockLoop true);
};

mac continue () {
    ret \(exit base.-blockLoopInner true);
};

mac range (i up::preprocess body) {
    ret \(for (sym (,i 0:(typeOf up))) (< ,i ,up) (= ,i (+ ,i 1)) ,body);
};

mac rangeRev (i up::preprocess body) {
    sym (s (genId));

    ret \(range ,s ,up {
        (sym (,i (- ,up 1 ,s)))
        (block ,body)
    });
};

mac range (i lo::preprocess hi::preprocess body) {
    ret \(for (sym (,i ,lo)) (<= ,i ,hi) (= ,i (+ ,i 1)) ,body);
};

mac rangeRev (i hi::preprocess lo::preprocess body) {
    sym (s (genId));

    ret \(range ,s ,lo ,hi {
        (sym (,i (+ ,lo (- ,hi ,s))))
        (block ,body)
    });
};

mac range (i lo::preprocess hi::preprocess delta::preprocess body) {
    ret \(for (sym (,i ,lo)) (<= ,i ,hi) (= ,i (+ ,i ,delta)) ,body);
};

mac rangeRev (i hi::preprocess lo::preprocess delta::preprocess body) {
    sym (s (genId));

    ret \(range ,s ,lo ,hi ,delta {
        (sym (,i (+ ,lo (- ,hi ,s))))
        (block ,body)
    });
};

mac repeat (body) {
    ret \(while true ,body);
};

mac repeat (n::preprocess body) {
    sym (s (genId));
    ret \(range ,s ,n ,body);
};

mac switch (val::preprocess rest0 rest1 rest::variadic) {
    sym (entries (+ \(,rest0 ,rest1) rest));

    sym (switchInnerCode {});
    range i 0 (- (lenOf entries) 2) 2 {
        base.assertIsOfType ([] entries i) raw;

        sym (switchEntryExitInnerCode {});
        range j (lenOf ([] entries i)) {
            = switchEntryExitInnerCode (+ switchEntryExitInnerCode \{
                (exit (== ,val ,([] entries i j)))
            });
        };
        = switchEntryExitInnerCode (+ switchEntryExitInnerCode \{
            (exit base.-blockSwitchEntry true)
        });

        = switchInnerCode (+ switchInnerCode \{
            (block base.-blockSwitchEntry () {
                (block ,switchEntryExitInnerCode)
                (block ,([] entries (+ i 1)))
                (exit base.-blockSwitch true)
            })
        });
    };

    block {
        exit (== (% (lenOf entries) 2) 0);
        = switchInnerCode (+ switchInnerCode \{
            (block ,([] entries (- (lenOf entries) 1)))
        });
    };

    ret \(block base.-blockSwitch () ,switchInnerCode);
};

mac ++ (val::preprocess) {
    ret \(= ,val (+ ,val 1));
};

mac -- (val::preprocess) {
    ret \(= ,val (- ,val 1));
};

mac += (val::preprocess by::preprocess) {
    ret \(= ,val (+ ,val ,by));
};

mac -= (val::preprocess by::preprocess) {
    ret \(= ,val (- ,val ,by));
};

mac *= (val::preprocess by::preprocess) {
    ret \(= ,val (* ,val ,by));
};

mac /= (val::preprocess by::preprocess) {
    ret \(= ,val (/ ,val ,by));
};

mac %= (val::preprocess by::preprocess) {
    ret \(= ,val (% ,val ,by));
};

mac <<= (val::preprocess by::preprocess) {
    ret \(= ,val (<< ,val ,by));
};

mac >>= (val::preprocess by::preprocess) {
    ret \(= ,val (>> ,val ,by));
};

mac &= (val::preprocess by::preprocess) {
    ret \(= ,val (& ,val ,by));
};

mac |= (val::preprocess by::preprocess) {
    ret \(= ,val (| ,val ,by));
};

mac ^= (val::preprocess by::preprocess) {
    ret \(= ,val (^ ,val ,by));
};

mac -> (val::preprocess m rest::variadic) {
    sym (ops (+ \(,val ,m) rest));

    sym (code \(passthrough ,([] ops 0)));
    range i 1 (- (lenOf ops) 1) {
        = code \([] (* ,code) ,([] ops i));
    };

    ret code;
};

mac && (val0 val1 rest::variadic) {
    sym (ops (+ \(,val0 ,val1) rest));

    sym (innerCode {});
    range i (lenOf ops) {
        = innerCode (+ innerCode \{
            (block {
                (exit ,([] ops i))
                (pass base.-blockLogAnd false)
            })});
    };
    = innerCode (+ innerCode \{ (pass true) });

    ret \(block base.-blockLogAnd bool ,innerCode);
};

mac || (val0 val1 rest::variadic) {
    sym (ops (+ \(,val0 ,val1) rest));

    sym (innerCode {});
    range i (lenOf ops) {
        = innerCode (+ innerCode \{
            (block {
                (exit (! ,([] ops i)))
                (pass base.-blockLogAnd true)
            })});
    };
    = innerCode (+ innerCode \{ (pass false) });

    ret \(block base.-blockLogAnd bool ,innerCode);
};

mac arr (ty::preprocess a::preprocess rest::(variadic preprocess)) {
    base.assertIsOfType ty type;

    sym (elems (+ \(,a) rest));
    sym (arrTy (ty (lenOf elems)));

    # genId not needed since only visible in inner code, and elements are preprocessed
    sym (innerCode \{ (sym res:,arrTy) });
    range i (lenOf elems) {
        = innerCode (+ innerCode \{ (= ([] res ,i)::noDrop ,([] elems i)) });
    };
    = innerCode (+ innerCode \{ (pass res) });

    ret \(block ,arrTy ,innerCode);
};

mac base.-tupType (a::preprocess b::preprocess rest::preprocess) {
    sym (res \(,(typeOf a) ,(typeOf b)));

    range i (lenOf rest) {
        = res (+ res \(,(typeOf ([] rest i))));
    };

    ret res;
};

mac tup (a::preprocess b::preprocess rest::(variadic preprocess)) {
    sym (elems (+ \(,a ,b) rest));
    sym (tupTy (base.-tupType a b rest));

    # genId not needed since only visible in inner code, and elements are preprocessed
    sym (innerCode \{ (sym res:,tupTy) });
    range i (lenOf elems) {
        = innerCode (+ innerCode \{ (= ([] res ,i)::noDrop ,([] elems i)) });
    };
    = innerCode (+ innerCode \{ (pass res) });

    ret \(block ,tupTy ,innerCode);
};

mac make (ty::preprocess pair rest::variadic) {
    base.assertIsOfType ty type;

    sym (pairs (+ \(,pair) rest));
    sym (inst (genId));

    sym (innerCode \{ (sym ,inst:ty) });
    range i (lenOf pairs) {
        base.assertIsOfType ([] pairs i) raw;
        if (!= (lenOf ([] pairs i)) 2) {
            message::error ([] pairs i)::loc "Each entry must contain exactly two values - element name and initial value.";
        };

        = innerCode (+ innerCode \{ (= ([] ,inst ,([] pairs i 0))::noDrop ,([] pairs i 1)) });
    };
    = innerCode (+ innerCode \{ (pass ,inst) });

    ret \(block ,ty ,innerCode);
};

mac lam (body) {
    ret \(fnc::global ,(genId) () () ,body);
};

mac lam (retTy body) {
    ret \(fnc::global ,(genId) () ,retTy ,body);
};

mac lam (args retTy body) {
    ret \(fnc::global ,(genId) ,args ,retTy ,body);
};

mac pat (body) {
    ret \(mac::global ,(genId) () ,body);
};

mac pat (args body) {
    ret \(mac::global ,(genId) ,args ,body);
};

eval (fnc base.-enumValName (enumName:id valName:id) id {
    ret (+::bare enumName \. valName);
});

eval (fnc base.-enumSizeName (enumTy:type) id {
    ret (+ \base.-enumSize (cast id enumTy));
});

mac base.-enumValsDecl (name enumTy::preprocess vals) {
    sym (code \(sym));

    sym valName:id valNamePrev:id init:raw;
    range i (lenOf vals) {
        if (base.isRaw ([] vals i)) {
            if (!= (lenOf ([] vals i)) 2) {
                message::error ([] vals i)::loc "Each entry must be either an id or have exactly two values - name and initial value.";
            };

            base.assertIsOfType ([] vals i 0) id;
            = valName ([] vals i 0);

            = init \(cast ,((name) cn) ,([] vals i 1));
        } {
            base.assertIsOfType ([] vals i) id;
            = valName ([] vals i);

            if (== i 0) {
                = init \(cast ,((name) cn) 0);
            } {
                = init \(+ ,(base.-enumValName name valNamePrev) (cast ,((name) cn) 1));
            };
        };

        = valNamePrev valName;

        = code (+ code
            \( (,(base.-enumValName name valName) ,init) ));
    };

    = code (+ code
        \( (,(base.-enumSizeName enumTy):(base.-widestU cn) ,(lenOf vals))));

    ret code;
};

mac enum (name ty::preprocess vals) {
    base.assertIsOfType name id;
    base.assertIsOfType ty type;
    base.assertIsOfType vals raw;

    if (== (lenOf vals) 0) {
        message::error vals::loc "Must specify at least one enum value.";
        ret ();
    };

    sym (enumTy (explicit::global ,name ty));

    ret \(eval (base.-enumValsDecl ,name ,enumTy ,vals));
};

mac enum (name vals) {
    ret \(enum ,name ,i32 ,vals);
};

eval (fnc base.getEnumSize (enumTy:type) base.-widestU {
    ret ((base.-enumSizeName enumTy));
});