eval (sym (base.-genSymToken 0:u64));

eval (fnc genSym () id {
    sym (s (+ \base.-genSym (cast id base.-genSymToken)));
    = base.-genSymToken (+ base.-genSymToken 1);
    ret s;
});

mac if (cond then) {
    ret \(block {
        (exit (! ,cond))
        (block ,then)
    });
};

mac if (cond then else) {
    ret \(block base.-blockIf () {
        (block {
            (exit (! ,cond))
            (block ,then)
            (exit base.-blockIf true)
        })
        (block ,else)
    });
};

mac while (cond body) {
    ret \(block base.-blockLoop () {
        (block base.-blockLoopInner () {
            (exit base.-blockLoop (! ,cond))
            (block ,body)
        })
        (loop true)
    });
};

mac for (init cond step body) {
    ret \(block base.-blockLoop () {
        ,init
        (block {
            (block base.-blockLoopInner () {
                (exit base.-blockLoop (! ,cond))
                (block ,body)
            })
            ,step
            (loop true)
        })
    });
};

mac break () {
    ret \(exit base.-blockLoop true);
};

mac continue () {
    ret \(exit base.-blockLoopInner true);
};

mac range (i up::preprocess body) {
    ret \(for (sym (,i 0:(typeOf up))) (< ,i ,up) (= ,i (+ ,i 1)) ,body);
};

mac rangeRev (i up::preprocess body) {
    sym (s (genSym));

    ret \(range ,s ,up {
        (sym (,i (- ,up 1 ,s)))
        (block ,body)
    });
};

mac range (i lo::preprocess hi::preprocess body) {
    ret \(for (sym (,i ,lo)) (<= ,i ,hi) (= ,i (+ ,i 1)) ,body);
};

mac rangeRev (i hi::preprocess lo::preprocess body) {
    sym (s (genSym));

    ret \(range ,s ,lo ,hi {
        (sym (,i (+ ,lo (- ,hi ,s))))
        (block ,body)
    });
};

mac ++ (x::preprocess) {
    ret \(= ,x (+ ,x 1));
};

mac -- (x::preprocess) {
    ret \(= ,x (- ,x 1));
};

mac ?_ (cond::preprocess onTrue::preprocess onFalse::preprocess) {
    ret \(block base.-blockTernSel ,(typeOf onTrue) {
        (if ,cond {
            (pass base.-blockTernSel ,onTrue)
        })
        (pass ,onFalse)
    });
};
