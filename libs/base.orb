eval (sym (base.-genSymToken 0:u64));

eval (fnc genSym () id {
    sym (s (+ \G (cast id base.-genSymToken)));
    ++ base.-genSymToken;
    ret s;
});

mac rule (name args pattern::plusEscape) {
    ret \(mac ,name ,args {
        ret ,pattern;
    });
};

rule if (cond then)
    (block {
        (exit (! ,cond))
        (block ,then)
    });

rule if (cond then else)
    (block base.-ifBlock () {
        (if ,cond ,(+ then \{ exit base.-ifBlock true; }))
        (block ,else)
    });

rule while (cond body)
    (block base.-loopWhole () {
        (exit (! ,cond))
        (block ,body)
        (loop true)
    });

rule for (init cond iter body)
    (block {
        ,init
        (block base.-loopWhole () {
            (exit (! ,cond))
            (block base.-loopBody () ,body)
            ,iter
            (loop true)
        })
    });

rule break ()
    (exit base.-loopWhole true);

rule continue ()
    (exit base.-loopBody true);

rule range (i lo::preprocess hi::preprocess body)
    (for (sym (,i ,lo)) (< ,i ,hi) (++ ,i) ,body);

rule range (i n::preprocess body)
    (range ,i 0 ,n ,body);

rule times (n::preprocess body)
    (range ,(genSym) ,n ,body);

rule ++ (x::preprocess)
    (= ,x (+ ,x 1));

rule -- (x::preprocess)
    (= ,x (- ,x 1));
